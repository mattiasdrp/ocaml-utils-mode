#+title: OCaml utils
#+author: mattiasdrp
#+date: <2025-02-22 Sat>
#+language: en_US
#+property: header-args :results silent :exports code :tangle yes

#+AUTO_TANGLE: t
#+keywords: OCaml literate

Literate configuration for [[file:ocaml-utils-mode.el][ocaml-utils-mode.el]].

* Table of Contents
:PROPERTIES:
:TOC:      :include all :ignore this
:END:

:CONTENTS:
- [[#header][Header]]
- [[#requirements][Requirements]]
- [[#variables-and-custom-variables][Variables and custom variables]]
- [[#dune-watch][Dune watch]]
- [[#variants][Variants]]
- [[#type-utilities][Type utilities]]
- [[#helpers][Helpers]]
- [[#main-functions][Main functions]]
- [[#ocaml-utils-mode][OCaml utils mode]]
  - [[#minor-mode-declaration][Minor mode declaration]]
- [[#footer][Footer]]
:END:

* Header
:PROPERTIES:
:CUSTOM_ID: header
:END:

#+begin_src emacs-lisp
  ;;; ocaml-utils-mode.el --- Emacs Minor Mode for OCaml utilitites

  ;; Copyright (C) 2024  mattiasdrp


  ;; Author: mattiasdrp
  ;; Maintainer: mattiasdrp <https://github.com/mattiasdrp>
  ;; Created: 26 february 2024
  ;; Version: 0.1.0
  ;; Licence: MIT
  ;; Keywords: emacs, tools, ocaml
  ;; URL: https://github.com/mattiasdrp/ocaml-utils-mode
  ;; Copyright (c) 2024 mattiasdrp and contributors.
  ;; Package-Requires: ((emacs "29.1"))

  ;;; Commentary:
  ;; This minor mode adds some utilities to OCaml in emacs

  ;;; Code:
#+end_src

* Requirements
:PROPERTIES:
:CUSTOM_ID: requirements
:END:

#+begin_src elisp
  (require 'ace-window)
  (require 'caml nil t)
#+end_src

* Variables and custom variables
:PROPERTIES:
:CUSTOM_ID: variables-and-custom-variables
:END:

#+begin_src elisp
(defvar ocaml-utils-dune-history nil
  "The history list for dune watch builds.")

(defcustom ocaml-utils-lock-dune nil
  "Should dune watch take the lock?")
#+end_src

* Dune watch
:PROPERTIES:
:CUSTOM_ID: dune-watch
:END:

#+begin_src elisp
  ;;;###autoload
  (defun ocaml-utils-dune-watch ()
    "Will call dune build -w BUILD on an async process."
    (interactive)
    (cond
     ((and-let* ((window (get-buffer-window "*dune watch*")))
        (aw-switch-to-window window)))
     ((and-let* ((buffer (get-buffer "*dune watch*")))
        (with-current-buffer buffer
          (with-selected-window
              (display-buffer-at-bottom (current-buffer)
                                        '((window-height . 0.2)))
            (set-window-dedicated-p (selected-window) t)
            (compilation-minor-mode t)))))
     ((let ((build (read-from-minibuffer "Build name: " nil nil nil 'ocaml-utils-dune-history))
            (buffer (get-buffer-create "*dune watch*"))
            (inhibit-read-only t))
        (with-current-buffer buffer
          (projectile-run-async-shell-command-in-root
           (concat (if ocaml-utils-lock-dune
                       ""
                     "DUNE_CONFIG__GLOBAL_LOCK=disabled ")
                   "dune build -w " build) buffer)
          ;; Make this process non blocking for killing
          ;; (defun ocaml-utils-erase-and-fill-buffer-no-lambda ()
          ;;   "Wrapper to avoid using lambda"
          ;;   (ocaml-utils-erase-and-fill-buffer buffer))
          ;; (add-hook 'after-save-hook #'ocaml-utils-erase-and-fill-buffer-no-lambda)
          (with-selected-window
              (display-buffer-at-bottom (current-buffer)
                                        '((window-height . 0.2)))
            (set-window-dedicated-p (selected-window) t)
            (compilation-minor-mode t))
          (set-process-query-on-exit-flag (get-buffer-process buffer) nil))))))
#+end_src

* Variants
:PROPERTIES:
:CUSTOM_ID: variants
:END:

Transform an OCaml constructor in an elisp cons cell.
If the constructor is a constant, returns a cons with its car set to it and its cdr set to nil. Otherwise, the cdr is the parameters attached to the constructor.

#+begin_src elisp
  (defun ocaml-utils--transform-constructor (value)
    "Transform an OCaml constructor in an elisp cons cell.
  If the constructor is a constant, returns a cons with its car set to it
  and its cdr set to nil.
  Otherwise, the cdr is the parameters attached to the constructor."
    (let* ((lvalue (string-split value "of"))
           (left (string-trim (car lvalue)))
           (right (nth 1 lvalue)))
      (if right
          (cons left (string-trim right))
        (cons left nil))))
#+end_src

For each constructors in the type declaration, create a pattern matching branch. If the constructor expects arguments, add a ~_~.

#+begin_src elisp
  (defun ocaml-utils--pp-variant (value)
    "For each constructors in the type declaration, create a pattern matching branch.
  If the constructor expects arguments, add a ~_~."
    (let* ((values (s-split "|" value t))
           (values (mapcar #'ocaml-utils--transform-constructor values))
           (txt
            (seq-reduce (lambda (acc val)
                          (pcase val
                            (`(,left . nil)  (concat acc "\n| " left " -> _"))
                            (`(,left . ,right)  (concat acc "\n| " left " _ -> _")))) values "" )))
      (string-trim-left txt)))
#+end_src

* Type utilities
:PROPERTIES:
:CUSTOM_ID: type-utilities
:END:

Queries LSP for the type at point.

#+begin_src elisp
  (defun ocaml-utils--lsp-type-at-point ()
    "Queries LSP for the type at point."
    (-some->> (lsp--text-document-position-params)
      (lsp--make-request "textDocument/hover")
      (lsp--send-request)
      (lsp:hover-contents)))
#+end_src

Parses the type returned by LSP.

#+begin_src elisp
  (defun ocaml-utils--parse-type (content index)
    "Parses the type returned by LSP."
    (let* ((value (plist-get content :value))
           (regexp "[\n\r]+\\|```\\(?:ocaml\\)?\\|.*=")
           (value (replace-regexp-in-string regexp "" (or value "")))
           (value (string-trim value)))
      `(:index ,index
               :value ,value
               :type ,(ocaml-utils--get-type value))))

#+end_src

Returns the kind of type (a variant, a record, an option a result or anything else.

#+begin_src elisp
  (defun ocaml-utils--get-type (string)
    "Returns the kind of type.
  A variant, a record, an option a result or anything else."
    (cond
     ((string-prefix-p "|" string) :variant)
     ((string-prefix-p "{" string) :record)
     ((string-suffix-p "option" string) :option)
     ((string-suffix-p "result" string) :result)
     ((string-match-p "|" string) :variant)
     (t :other)))
#+end_src

Returns the list of all types declared in the current buffer before point.

#+begin_src elisp
  (defun ocaml-utils--types-alist ()
    "Returns the list of all types declared in the current buffer before point."
    (save-excursion
      (let ((type-alist (make-hash-table :test 'equal)))
        (goto-char (line-beginning-position 2))
        ;; collect definitions
        (while (caml-prev-index-position-function)
          (let* ((name (caml-match-string 5)))
            (when (looking-at "[ \t]*type")
              (save-excursion
                (let* ((_ (forward-char 5))
                       (index (point))
                       (content (ocaml-utils--lsp-type-at-point))
                       (type (ocaml-utils--parse-type content index)))
                  (puthash name type type-alist))))
            (when (looking-at "[ \t]*and")
              (save-excursion
                (let* ((_ (forward-char 4))
                       (index (point))
                       (content (ocaml-utils--lsp-type-at-point))
                       (type (ocaml-utils--parse-type content index)))
                  (puthash name type type-alist))))))
        type-alist)))

#+end_src

If the value represents an variant, inserts it's destruction as a pattern matching.

#+begin_src elisp
  (defun ocaml-utils--insert-type (value word)
    "If the value represents an variant, inserts it's destruction as a pattern matching."
    (when (eq (plist-get value :type) :variant)
      (let* ((txt (ocaml-utils--pp-variant (plist-get value :value)))
             (word (or word "_"))
             (txt (concat "match " word " with\n" txt))
             (bounds (bounds-of-thing-at-point 'symbol))
             (start (point)))
        (when bounds (delete-region (car bounds) (cdr bounds)))
        (insert txt)
        (indent-region start (point)))))
#+end_src

#+begin_src elisp
  (defun ocaml-utils--complete-type (word)
    "Asks the user for a type and if this type is a variant, destruct it."
    (let* ((start (point))
           (types-alist (ocaml-utils--types-alist))
           (type-chosen (completing-read "Choose a type: " types-alist))
           (value (gethash type-chosen types-alist)))
      (ocaml-utils--insert-type value word)))
#+end_src

* Helpers
:PROPERTIES:
:CUSTOM_ID: helpers
:END:

#+begin_src elisp
(defun ocaml-utils--extract-name (content)
  (let* ((value (plist-get content :value))
         (re_name "[\n\r]*```ocaml[[:space:]]\\(.*\\)[[:space:]]")
         (_ (string-match re_name value))
         (name (match-string 1 value)))
    name))
#+end_src

* Main functions
:PROPERTIES:
:CUSTOM_ID: main-functions
:END:

Destruct the variable at point.
If no type can be inferred for the variable, asks the user for a type.

#+begin_src elisp
  ;;;###autoload
  (defun ocaml-utils-destruct ()
    "Destruct the variable at point.
  If no type can be inferred for the variable, asks the user for a type."
    (interactive)
    (let ((content (ocaml-utils--lsp-type-at-point))
          (word (thing-at-point 'symbol)))
      (if content
          (let* ((types-alist (ocaml-utils--types-alist))
                 (name (ocaml-utils--extract-name content))
                 (value (gethash name types-alist)))
            (if value
                (ocaml-utils--insert-type value word)
              (ocaml-utils--complete-type word)))
        (ocaml-utils--complete-type word))))

#+end_src

* OCaml utils mode
:PROPERTIES:
:CUSTOM_ID: ocaml-utils-mode
:END:

The prefix for ocaml-utils-mode key bindings.

#+begin_src elisp
  (defcustom ocaml-utils-keymap-prefix "\C-c \C-o"
    "The prefix for ocaml-utils-mode key bindings."
    :type 'key
    :group 'ocaml-utils)
#+end_src

Utility function to prefix a key with ~ocaml-utils-keymap-prefix~
#+begin_src elisp
(defun ocaml-utils--key (key)
  (kbd (concat ocaml-utils-keymap-prefix " " key)))
#+end_src

** Minor mode declaration
:PROPERTIES:
:CUSTOM_ID: minor-mode-declaration
:END:

#+begin_src elisp
  ;;;###autoload
  (define-minor-mode ocaml-utils-mode
    "Toggles buffer local ocaml-utils-mode."
    :init-value nil
    :global nil
    :group 'ocaml-utils
    :lighter " ocaml-utils"
    :keymap
    (list
     (cons (ocaml-utils--key "w") #'ocaml-utils-dune-watch)
     (cons (ocaml-utils--key "a") #'ocaml-utils-destruct)))
#+end_src

* Footer
:PROPERTIES:
:CUSTOM_ID: footer
:END:

#+begin_src elisp
(provide 'ocaml-utils-mode)
;;; ocaml-utils-mode.el ends here
#+end_src
